#! /usr/bin/env python
# -*- coding: utf-8 -*-
"""
 4生成动态参数 int,double,bool,string,列表
 5实现流程:
 6    1.导包
 7    2.创建生成器
 8    3.向生成器添加若干参数
 9    4.生成中间文件并退出
10
"""
# 1.导包
from dynamic_reconfigure.parameter_generator_catkin import *
PACKAGE = "control"
node_name="dr_client"
file_name="control"
# 2.创建生成器
gen = ParameterGenerator()

# 3.向生成器添加若干参数
#add(name, paramtype, level, description, default=None, min=None, max=None, edit_method="")
gen.add("ENABLE",bool_t,0,"bool参数",False)
gen.add("parking_able",bool_t,0,"bool参数",False)
gen.add("drive_torque",double_t,0,"浮点参数",0,0,50)
gen.add("drive_vel",double_t,0,"浮点参数",0,-2,2)
gen.add("steer_angle",double_t,0,"浮点参数",0,-28,28)
gen.add("brake_torque",double_t,0,"浮点参数",0,0,50)
gen.add("light",int_t,0,"整型参数",4,0,7)


many_enum = gen.enum([gen.const("park",int_t,1,"parking"),
                gen.const("dangling",int_t,2,"dangling"),
                gen.const("forward",int_t,3,"forward"),
                gen.const("backward",int_t,4,"backward")
                ],"a car gear set")
# gen.add("gear",int_t,0,"整型参数",2,1,4)
gen.add("gear",int_t,0,"列表参数",2,1,4, edit_method=many_enum)

gen.add("pid_p",double_t,0,"浮点参数",1,0,10)
gen.add("pid_i",double_t,0,"浮点参数",0,0,5)
gen.add("pid_d",double_t,0,"浮点参数",0,0,2)
# 4.生成中间文件并退出
exit(gen.generate(PACKAGE,node_name,file_name))
